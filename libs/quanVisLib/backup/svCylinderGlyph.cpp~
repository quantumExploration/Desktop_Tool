#include <GL/glew.h>
#include "svCylinderGlyph.h"
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <iostream>
#include <fstream>
#include "svException.h"
#include "svUtil.h"

using namespace std;


namespace __svl_lib{

svCylinderGlyph::svCylinderGlyph(svVectorField *f):svGlyph()
{
  field = f;

  cylinderEnd1 = NULL;//new svVector3Array[1];
  cylinderEnd2 = NULL;//new svVector3Array[1];
  cylinderEnd3 = NULL;//new svVector3Array[1];
  cylinderEnd4 = NULL;//new svVector3Array[1];

  tube_vertices = NULL;//new VBOVertex[1];
  legend_vertices = NULL;//new VBOVertex[1];
  tube_indices = NULL;//new int[1];
  tube_base_vertices = NULL;//new VBOVertex[1];
  tube_base_indices = NULL;//new int[1];

  field->GetPhysicalDimension(&lbbox, &rbbox);
}

void svCylinderGlyph::Clean()
{
     cleanup();
}

void svCylinderGlyph::CleanData()
{
    if(legend_vertices==NULL)
      delete [] legend_vertices;
    if(tube_vertices==NULL)
      delete [] tube_vertices;
    if(tube_base_vertices==NULL)
      delete [] tube_base_vertices;
}

void svCylinderGlyph::CleanIndex()
{
  if(tube_indices!=NULL)
     delete [] tube_indices;
  if(tube_base_indices!=NULL)
     delete [] tube_base_indices;
}

void svCylinderGlyph::Update()
{
     UpdateData();
     UpdateIndex();
}

svCylinderGlyph::~svCylinderGlyph()
{
   cleanup();

       if(cylinderEnd1 != NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd1[i].free();
             }
             delete [] cylinderEnd1;
             cylinderEnd1 = NULL;
       }
       if(cylinderEnd2 != NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd2[i].free();
             }
             delete [] cylinderEnd2;
             cylinderEnd2 = NULL;
       }
       if(cylinderEnd3 != NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd3[i].free();
             }
             delete [] cylinderEnd3;
             cylinderEnd3 = NULL;
       }
       if(cylinderEnd4 != NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd4[i].free();
             }
             delete [] cylinderEnd4;
             cylinderEnd4 = NULL;
       }
}

void svCylinderGlyph::UpdateData()
{
     CleanData();

    int dataSize = 0;
    for(int i=0;i<seed_num;i++)
        for(int j=0;j<myData->GetSeed(i);j++)
              dataSize++;

     tube_vertices_size = dataSize*(CYLINDERSLICE+1)*2;
     tube_base_vertices_size = dataSize*(CYLINDERSLICE+1+1);

     tube_vertices = new VBOVertex[tube_vertices_size];//svVector3Array[seed_num];
     tube_base_vertices = new VBOVertex[tube_base_vertices_size];//svVector3Array[seed_num];
     legend_vertices = new VBOVertex[dataSize*2];
}

void svCylinderGlyph::UpdateIndex()
{
     CleanIndex();

     int count = 0;
     for(int i=0;i<seed_num;i++)
     {
          for(int j=0;j<myData->GetSeed(i);j++)
          {
                   if(myData->GetVisibleLabel(i,j))
                          count++;
          }
     }
     tube_indices_size = count*4*CYLINDERSLICE;
     tube_base_indices_size = count*3*CYLINDERSLICE;

     tube_indices = new int[tube_indices_size];
     tube_base_indices = new int[tube_base_indices_size];
cerr<<" index "<<tube_indices_size<<" "<<tube_base_indices_size<<endl;

}

void svCylinderGlyph::UpdateIndexVBO()
{
   if(glIsBuffer(TUBE_IVBO))
           glDeleteBuffers(1, &TUBE_IVBO);
   glGenBuffers(1, &TUBE_IVBO);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TUBE_IVBO);
   glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(GLuint)*tube_indices_size,
                tube_indices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);

   if(glIsBuffer(TUBE_BASE_IVBO))
           glDeleteBuffers(1, &TUBE_BASE_IVBO);
   glGenBuffers(1, &TUBE_BASE_IVBO);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TUBE_BASE_IVBO);
   glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(GLuint)*tube_base_indices_size,
                tube_base_indices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
}

void svCylinderGlyph::UpdateTubeVBO()
{
    if(glIsBuffer(TUBE_VBO))
          glDeleteBuffers(1,&TUBE_VBO);

   glGenBuffers(1, &TUBE_VBO);
   glBindBuffer(GL_ARRAY_BUFFER, TUBE_VBO);
   glBufferData(GL_ARRAY_BUFFER, sizeof(VBOVertex)*tube_vertices_size,
                tube_vertices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER,0);

    if(glIsBuffer(TUBE_BASE_VBO))
          glDeleteBuffers(1,&TUBE_BASE_VBO);
   glGenBuffers(1, &TUBE_BASE_VBO);
   glBindBuffer(GL_ARRAY_BUFFER, TUBE_BASE_VBO);
   glBufferData(GL_ARRAY_BUFFER, sizeof(VBOVertex)*tube_base_vertices_size,
                tube_base_vertices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER,0);
}

void svCylinderGlyph::GenerateVBO()
{
   glGenBuffers(1, &TUBE_VBO);
   glBindBuffer(GL_ARRAY_BUFFER, TUBE_VBO);
   glBufferData(GL_ARRAY_BUFFER, sizeof(VBOVertex)*tube_vertices_size,
                tube_vertices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER,0);

   glGenBuffers(1, &TUBE_IVBO);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TUBE_IVBO);
   glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(GLuint)*tube_indices_size,
                tube_indices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);

   glGenBuffers(1, &TUBE_BASE_VBO);
   glBindBuffer(GL_ARRAY_BUFFER, TUBE_BASE_VBO);
   glBufferData(GL_ARRAY_BUFFER, sizeof(VBOVertex)*tube_base_vertices_size,
                tube_base_vertices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ARRAY_BUFFER,0);

   glGenBuffers(1, &TUBE_BASE_IVBO);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TUBE_BASE_IVBO);
   glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(GLuint)*tube_base_indices_size,
                tube_base_indices,GL_DYNAMIC_DRAW);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,0);
}

void svCylinderGlyph::RenderVBO()
{
   glEnableClientState(GL_VERTEX_ARRAY);
   glEnableClientState(GL_NORMAL_ARRAY);
   glEnableClientState(GL_COLOR_ARRAY);

   glBindBuffer(GL_ARRAY_BUFFER, TUBE_VBO);
   glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TUBE_IVBO);

   glVertexPointer(3, GL_FLOAT, sizeof(VBOVertex), (char*)NULL+0);
   glNormalPointer(GL_FLOAT, sizeof(VBOVertex), (char*)NULL+sizeof(float)*3);
   glColorPointer(4, GL_FLOAT, sizeof(VBOVertex),(char*)NULL+sizeof(float)*6);

   glDrawElements(GL_QUADS, tube_indices_size, GL_UNSIGNED_INT,NULL);

   glBindBuffer(GL_ARRAY_BUFFER, TUBE_BASE_VBO);
   glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, TUBE_BASE_IVBO);

   glVertexPointer(3, GL_FLOAT, sizeof(VBOVertex), (char*)NULL+0);
   glNormalPointer(GL_FLOAT, sizeof(VBOVertex), (char*)NULL+sizeof(float)*3);
   glColorPointer(4, GL_FLOAT, sizeof(VBOVertex),(char*)NULL+sizeof(float)*6);

   glDrawElements(GL_TRIANGLES, tube_base_indices_size, GL_UNSIGNED_INT,NULL);

   glBindBuffer(GL_ARRAY_BUFFER, 0);
   glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

   glDisableClientState(GL_VERTEX_ARRAY);
   glDisableClientState(GL_NORMAL_ARRAY);
   glDisableClientState(GL_COLOR_ARRAY);
}

void svCylinderGlyph::Draw_InnerLegend()
{
 svVector3 pos = lproperty.vPos;
 svVector3 vel = lproperty.vDir;
 svScalar l = lproperty.vSegment;
 svScalar length = lproperty.vUnit;

 svVector3 end;
 end = pos + (l*length) * vel;
// glLineWidth(1);
 glColor4f(lproperty.color[0], lproperty.color[1], lproperty.color[2], lproperty.color[3]);

 glBegin(GL_LINES);
 glVertex3f(pos[0], pos[1], pos[2]);
 glVertex3f(end[0], end[1], end[2]);
 glEnd();

 svScalar fishbone_l = length;//2/3.;

 svVector3 v;
 for(int i=0;i<(int)l;i++)
 {
        svVector3 head = pos + vel * (i+1) * length;
        v = svGetPerpendicularVector(vel);
        svVector3 p = head - fishbone_l * vel;
        svVector3 p1 = p + v * fishbone_l*0.3;
        svVector3 p2 = p - v * fishbone_l*0.3;

        glBegin(GL_LINES);
        glVertex3f(head[0], head[1], head[2]);
        glVertex3f(p1[0], p1[1], p1[2]);
        glEnd();

        glBegin(GL_LINES);
        glVertex3f(head[0], head[1], head[2]);
        glVertex3f(p2[0], p2[1], p2[2]);
        glEnd();
 }
}

void svCylinderGlyph::Draw_WidthLegend()
{
 svVector3 pos = lproperty.hPos;
 svVector3 vel = lproperty.hDir;
 svScalar l = lproperty.hSegment;
 svScalar length = lproperty.hUnit;

 svVector3 v = svGetPerpendicularVector(vel);
 svVector3 end1;
 svVector3 end2;
 svScalar shift = 0.005;
 end1 = pos;// - vel * shift;
 end2 = pos+ (svScalar)(l*length) * v;//- vel * shift;

// glLineWidth(1);

 glColor4f(lproperty.color[0], lproperty.color[1], lproperty.color[2], lproperty.color[3]);
 glBegin(GL_LINES);

 glVertex3f(end1[0], end1[1], end1[2]);
 glVertex3f(end2[0], end2[1], end2[2]);

 glEnd();

 svVector3 top = pos + vel;

 svScalar fishbone_l = length;//2/3.;
 svVector3 v2 = normalize(svGetRotatePoint(top, pos, v, 90));

 for(int i=0;i<(int)l;i++)
 {
        svVector3 head = pos + v * (i+1) * length;
        v2 = svGetPerpendicularVector(v);
        svVector3 p = head - fishbone_l * v;
        svVector3 p1 = p + v2 * fishbone_l*0.3;
        svVector3 p2 = p - v2 * fishbone_l*0.3;

        glBegin(GL_LINES);
        glVertex3f(head[0], head[1], head[2]);
        glVertex3f(p1[0], p1[1], p1[2]);
        glEnd();

        glBegin(GL_LINES);
        glVertex3f(head[0], head[1], head[2]);
        glVertex3f(p2[0], p2[1], p2[2]);
        glEnd();
 }
}

void svCylinderGlyph::cleanup()
{
   if(glIsBuffer(TUBE_VBO))
   {
    glDeleteBuffers(1, &TUBE_VBO);
    glDeleteBuffers(1, &TUBE_IVBO);
    glDeleteBuffers(1, &TUBE_BASE_VBO);
    glDeleteBuffers(1, &TUBE_BASE_IVBO);
   }
      delete [] legend_vertices;
      delete [] tube_vertices;
      delete [] tube_base_vertices;
      delete [] tube_indices;
      delete [] tube_base_indices;

/*       if(cylinderEnd1 == NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd1[i].free();
             }
             delete [] cylinderEnd1;
             cylinderEnd1 = NULL;
       }
       if(cylinderEnd2 == NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd2[i].free();
             }
             delete [] cylinderEnd2;
             cylinderEnd2 = NULL;
       }
       if(cylinderEnd3 == NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd3[i].free();
             }
             delete [] cylinderEnd3;
             cylinderEnd3 = NULL;
       }
       if(cylinderEnd4 == NULL)
       {
             for(int i=0;i<seed_num;i++)
             {
                  cylinderEnd4[i].free();
             }
             delete [] cylinderEnd4;
             cylinderEnd4 = NULL;
       }
*/
}

}
